<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- because we need the HibernateConfig bean to get initialized before 
		we used its datasource -->
	<context:component-scan base-package="net.perfectsolution" />



	<!-- We don't want to have any security on the static resources -->
	<http pattern="/resources/**" security="none" />

	<http create-session="never">
		<!-- only admin access -->
		<!--  <intercept-url pattern="/manage/**" access="hasAuthority('ADMIN')" />-->
		<intercept-url pattern="/**" access="permitAll" />
		<form-login login-page="/login" />
		<session-management invalid-session-url="/login">
			<concurrency-control max-sessions="1"  expired-url="/login"/>
		</session-management>	
		<logout />
		<csrf disabled="true"/>
	</http>




	<authentication-manager>
		<authentication-provider>
			<!-- this Data Source name will match with the bean in HibernateConfig 
				class -->
			<jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="select email, password, enabled from admin where email = ?"
				authorities-by-username-query="select email, role from admin where email = ?" /><!-- 
				this name will match with the bean in HibernateConfig class -->

		</authentication-provider>
	</authentication-manager>


</beans:beans>